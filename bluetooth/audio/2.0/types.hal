/*
 * Copyright 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.hardware.bluetooth.audio@2.0;

/**
 * POSIX timespec.
 */
struct TimeSpec {
    uint64_t tvSec;   // seconds
    uint64_t tvNSec;  // nanoseconds
};

enum Status : uint8_t {
    SUCCESS = 0x00,
    /** Codec configuration not supported by the audio platform */
    UNSUPPORTED_CODEC_CONFIGURATION,
    /** Any other failure */
    FAILURE,
};

enum SessionType : uint8_t {
    UNKNOWN,
    /** A2DP legacy that AVDTP media is encoded by Bluetooth Stack */
    A2DP_SOFTWARE_ENCODING_DATAPATH,
    /** The encoding of AVDTP media is done by HW and there is control only */
    A2DP_HARDWARE_OFFLOAD_DATAPATH,
    /** Used when encoded by Bluetooth Stack and streaming to Hearing Aid */
    HEARING_AID_SOFTWARE_ENCODING_DATAPATH,
};

enum CodecType : uint32_t {
    UNKNOWN = 0x00,
    SBC = 0x01,
    AAC = 0x02,
    APTX = 0x04,
    APTX_HD = 0x08,
    LDAC = 0x10,
};

enum SampleRate : uint32_t {
    RATE_UNKNOWN = 0x00,
    RATE_44100 = 0x01,
    RATE_48000 = 0x02,
    RATE_88200 = 0x04,
    RATE_96000 = 0x08,
    RATE_176400 = 0x10,
    RATE_192000 = 0x20,
    RATE_16000 = 0x40,
    RATE_24000 = 0x80,
};

enum BitsPerSample : uint8_t {
    BITS_UNKNOWN = 0x00,
    BITS_16 = 0x01,
    BITS_24 = 0x02,
    BITS_32 = 0x04,
};

enum ChannelMode : uint8_t {
    UNKNOWN = 0x00,
    MONO = 0x01,
    STEREO = 0x02,
};

enum SbcChannelMode : uint8_t {
    /** Channel Mode: 4 bits */
    UNKNOWN = 0x00,
    JOINT_STEREO = 0x01,
    STEREO = 0x02,
    DUAL = 0x04,
    MONO = 0x08,
};

enum AacObjectType : uint8_t {
    /** MPEG-2 Low Complexity. Support is Mandatory. */
    MPEG2_LC = 0x80,
    /** MPEG-4 Low Complexity. Support is Optional. */
    MPEG4_LC = 0x40,
    /** MPEG-4 Long Term Prediction. Support is Optional. */
    MPEG4_LTP = 0x20,
    /** MPEG-4 Scalable. Support is Optional. */
    MPEG4_SCALABLE = 0x10,
};

enum LdacChannelMode : uint8_t {
    /** Channel Mode: 3 bits */
    UNKNOWN = 0x00,
    STEREO = 0x01,
    DUAL = 0x02,
    MONO = 0x04,
};

struct CodecConfiguration {
    /** Audio PCM data configuration */
    struct PcmDataConfiguration {
        /** Sampling rate for encoder */
        SampleRate sampleRate;
        /** Bits per sample for encoder */
        BitsPerSample bitsPerSample;
        /** Channel mode for encoder */
        ChannelMode channelMode;
    } pcmDataConfiguration;

    /** Encoded audio data codec configuration. It is used only if the
     * HAL is responsible for encoding the PCM audio data. */
    struct EncodedDataConfiguration {
        /** Bluetooth A2DP codec */
        CodecType codecType;
        /**
         * The encoded audio bitrate in bits / second.
         * 0x00000000 - The audio bitrate is not specified / unused
         * 0x00000001 - 0x00FFFFFF - Encoded audio bitrate in bits/second
         * 0x01000000 - 0xFFFFFFFF - Reserved
         */
        uint32_t encodedAudioBitrate;
        /** Peer MTU (in octets) */
        uint16_t peerMtu;
        /** Content protection by SCMS-T */
        bool isScmstEnabled;
        safe_union CodecSpecific {
            /**
             * SBC Codec specific information
             * Refer to SBC Codec specific information elements in A2DP v1.3
             * Profile Specification.
             */
            struct SbcData {
                /** Reserved: 4 bits | Channel Mode: 4 bits */
                SbcChannelMode channelMode;
                /** Block length: 4 bits | Subbands: 2 bits | Allocation Method: 2 bits */
                uint8_t codecParameters;
                /** Minimum bitpool value */
                uint8_t minBitpool;
                /** Maximum bitpool value */
                uint8_t maxBitpool;
            } sbcData;
            struct AacData {
                /** AAC Object Type */
                AacObjectType aacObjectType;
                /** True if Variable Bit Rate is enabled */
                bool variableBitRateEnabled;
            } aacData;
            struct LdacData {
                /** Reserved: 5 bits | Channel Mode: 3 bits */
                LdacChannelMode channelMode;
                /**
                 * LDAC bitrate index value:
                 * 0x00 - High
                 * 0x01 - Mid
                 * 0x02 - Low
                 * 0x7F - ABR (Adaptive Bit Rate)
                 */
                uint8_t bitrateIndex;
            } ldacData;
        } codecSpecific;
    } encodedDataConfiguration;
};
