/*
 * Copyright (C) 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.hardware.radio.config@1.3;

import android.hardware.radio@1.1::GeranBands;
import android.hardware.radio@1.1::EutranBands;
import android.hardware.radio@1.4::RadioAccessFamily;
import android.hardware.radio@1.5::NgranBands;
import android.hardware.radio@1.5::UtranBands;

/** Type for the SIM slot. */
enum SlotType : int32_t {
    /** Slot type for UICC/pSIM (physical SIM). */
    UICC       = 1,
    /** Slot type for iUICC/iSIM (integrated SIM). */
    IUICC      = 2,
    /** Slot type for eUICC/eSIM (embedded SIM). */
    EUICC      = 3,
    /** Slot type for soft SIM (no physical SIM). */
    SOFT_SIM   = 4,
};

/** A field in PhoneCapability that holds information about the SIM slot. */
struct SimSlotCapability {
    /** Corresponds to physicalSlotId in Radio@1.2::CardStatus. */
    uint32_t physicalSlotId;

    /** Type of slot. */
    SlotType slotType;
};

/** Bitmask of features that can be supported by a single modem. */
enum ModemFeatures : int32_t {
    /** 3GPP2 capability. */
    THREE_GPP2_REG            = 1 << 0,
    /** 3GPP capability. */
    THREE_GPP_REG             = 1 << 1,
    /** CDMA 2000 with EHRPD capability. */
    CDMA2000_EHRPD            = 1 << 2,
    /** GSM/EDGE capability. */
    GERAN                     = 1 << 3,
    /** UMTS capability. */
    UTRAN                     = 1 << 4,
    /** LTE capability. */
    EUTRAN                    = 1 << 5,
    /** 5G capability. */
    NGRAN                     = 1 << 6,
    /** 5G dual connectivity capability. */
    EN_DC                     = 1 << 7,
    /** VoLTE capability (IMS registered). */
    PS_VOICE_REG              = 1 << 8,
    /** CS voice call capability. */
    CS_VOICE_SESSION          = 1 << 9,
    /** Internet connection capability. */
    INTERACTIVE_DATA_SESSION  = 1 << 10,
    /** Dedicated bearer capability. */
    DEDICATED_BEARER          = 1 << 11,
    /** Network scanning capability. */
    NETWORK_SCAN              = 1 << 12,
    /** CDMA capability for SIM associated with modem. */
    CSIM_APP                  = 1 << 13,
};

struct ConcurrentModemFeatures {
    /**
     * A vector of concurrently supportable modem features across all modems.
     * Each entry in the vector is a bitfield of ModemFeatures that can be used
     * concurrently with the other ModemFeatures in that list.
     * Each bitfield must be the full set of features for a single modem.
     *
     * On a Dual-SIM device, each entry will be a vector of length 2.
     * The examples below depict the modemFeatures for four Dual-SIM setups:
     * 1. Only one modem can PS attach (IMS registered).
     *    {
     *        (GERAN_REG | UTRAN_REG | EUTRAN_REG | PS_VOICE_REG |
     *            CS_VOICE_SESSION | INTERACTIVE_DATA_SESSION | DEDICATED_BEARER),
     *        (GERAN_REG | UTRAN_REG)
     *    }
     *    or
     *    {
     *        (GERAN_REG | UTRAN_REG | EUTRAN_REG | PS_VOICE_REG |
     *            INTERACTIVE_DATA_SESSION),
     *        (GERAN_REG | UTRAN_REG | CS_VOICE_SESSION)
     *    }
     * 2. Both modems can PS attach (dual VoLTE).
     *    {
     *        (GERAN_REG | UTRAN_REG | EUTRAN_REG | PS_VOICE_REG |
     *            CS_VOICE_SESSION | INTERACTIVE_DATA_SESSION | DEDICATED_BEARER),
     *        (GERAN_REG | UTRAN_REG | EUTRAN_REG | PS_VOICE_REG)
     *    }
     * 3. Both modems can maintain an Internet connection, but they share
     *    one RF hardware.
     *    {
     *        (GERAN_REG | UTRAN_REG | EUTRAN_REG | PS_VOICE_REG |
     *            CS_VOICE_SESSION | INTERACTIVE_DATA_SESSION | DEDICATED_BEARER),
     *        (GERAN_REG | UTRAN_REG | EUTRAN_REG | PS_VOICE_REG |
     *            INTERACTIVE_DATA_SESSION)
     *    }
     * 4. Both modems can maintain an Internet connection, and they have
     *    their own RF hardware.
     *    {
     *        (GERAN_REG | UTRAN_REG | EUTRAN_REG | PS_VOICE_REG |
     *            CS_VOICE_SESSION | INTERACTIVE_DATA_SESSION | DEDICATED_BEARER),
     *        (GERAN_REG | UTRAN_REG | EUTRAN_REG | PS_VOICE_REG |
     *            INTERACTIVE_DATA_SESSION | DEDICATED_BEARER)
     *    }
     */
    vec<bitfield<ModemFeatures>> modemFeatures;
};

/**
 * Overwritten from @1.1::PhoneCapability to add new capabilities and deprecate
 * maxActiveData, maxActiveInternetData, isInternetLingeringSupported, logicalModemList.
 * Replaces RadioConfig@1.1::ModemInfo and should replace Radio@1.4::RadioCapabilities
 * in the next major version upgrade. In the future, this should be extended instead of overwritten.
 */
struct PhoneCapability {
    /**
     * 3GPP UE category for UTRAN downlink direction.
     * 25.306 Table 5.1a
     */
    uint8_t utranUeCategoryDl;
    /**
     * 3GPP UE category for UTRAN uplink direction.
     * 25.306 Table 5.1g
     */
    uint8_t utranUeCategoryUl;
    /**
     * 3GPP UE category for EUTRAN downlink direction.
     * 25.306 Table 4.1a
     */
    uint8_t eutranUeCategoryDl;
    /**
     * 3GPP UE category for EUTRAN uplink direction.
     * 25.306 Table 4.1a-2
     */
    uint8_t eutranUeCategoryUl;

    /**
     * Length of grace period for switching between logical modems, in milliseconds.
     * Used only when the number of logical modems is greater than the number of
     * Internet connections the device can support, otherwise must be 0.
     */
    uint64_t psDataConnectionLingerTimeMillis;

    vec<GeranBands> geranBands;
    vec<UtranBands> utranBands;
    vec<EutranBands> eutranBands;
    vec<NgranBands> ngranBands;

    /**
     * 32-bit bitmap of supported Radio@1.4::RadioAccessFamily types.
     * Note that RadioAccessFamily is actually the radio access technologies, so it should be
     * renamed in the next major version upgrade.
     */
    bitfield<RadioAccessFamily> supportedRats;

    /**
     * List of unique logical modem UUIDs from Radio@1.4::RadioCapabilities.
     * A UUID is typically "com.xxxx.lmX" where X is the logical modem ID.
     * Must be equal to the number of logical modems in the device.
     * Radio@1.2::RadioConst::MAX_UUID_LENGTH is the max length of each UUID.
     */
    vec<string> logicalModemUuids;

    /**
     * List of SIM slot capabilities. The order of physical slot IDs must correspond to
     * the order of modems in logicalModemUuids.
     */
    vec<SimSlotCapability> simSlotCapabilities;

    /**
     * A vector of all sets of concurrently supportable modem feature sets. The order of modems
     * in modemFeatures must correspond to the order of modems in logicalModemUuids.
     * Each entry in concurrentFeatureSupport is independent of others in the list
     * and represents a set of concurrently supportable features across all modems.
     * Each entry in ConcurrentModemFeatures::modemFeatures is a bitfield of
     * concurrently supported ModemFeatures for one modem.
     */
    vec<ConcurrentModemFeatures> concurrentFeatureSupport;
};
